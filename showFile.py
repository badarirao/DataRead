# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'show_file1.ui'
#
# Created by: PyQt5 UI code generator 5.9.2
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_Plotter(object):
    def setupUi(self, Plotter):
        Plotter.setObjectName("Plotter")
        Plotter.resize(1403, 1290)
        self.centralwidget = QtWidgets.QWidget(Plotter)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.commentsBox = QtWidgets.QGroupBox(self.centralwidget)
        self.commentsBox.setMaximumSize(QtCore.QSize(16777215, 400))
        self.commentsBox.setObjectName("commentsBox")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.commentsBox)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.metaDataFixed = QtWidgets.QTextEdit(self.commentsBox)
        self.metaDataFixed.setObjectName("metaDataFixed")
        self.verticalLayout_3.addWidget(self.metaDataFixed)
        self.metaDataComments = QtWidgets.QTextEdit(self.commentsBox)
        self.metaDataComments.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.metaDataComments.sizePolicy().hasHeightForWidth())
        self.metaDataComments.setSizePolicy(sizePolicy)
        self.metaDataComments.setObjectName("metaDataComments")
        self.verticalLayout_3.addWidget(self.metaDataComments)
        self.gridLayout_3.addWidget(self.commentsBox, 1, 0, 1, 1)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.addPlotButton = QtWidgets.QPushButton(self.centralwidget)
        self.addPlotButton.setObjectName("addPlotButton")
        self.verticalLayout.addWidget(self.addPlotButton)
        self.plotTree = QtWidgets.QTreeWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.plotTree.sizePolicy().hasHeightForWidth())
        self.plotTree.setSizePolicy(sizePolicy)
        self.plotTree.setMinimumSize(QtCore.QSize(400, 700))
        self.plotTree.setDragEnabled(True)
        self.plotTree.setDragDropMode(QtWidgets.QAbstractItemView.InternalMove)
        self.plotTree.setObjectName("plotTree")
        self.plotTree.header().setVisible(False)
        self.plotTree.header().setDefaultSectionSize(562)
        self.plotTree.header().setMinimumSectionSize(256)
        self.plotTree.header().setStretchLastSection(False)
        self.verticalLayout.addWidget(self.plotTree)
        self.gridLayout_3.addLayout(self.verticalLayout, 0, 1, 1, 1)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setMaximumSize(QtCore.QSize(16777215, 100))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.gridLayout_2.addWidget(self.frame_2, 0, 0, 1, 2)
        self.frame = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setMinimumSize(QtCore.QSize(0, 650))
        self.frame.setStyleSheet("")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2.addWidget(self.frame, 1, 1, 1, 1)
        self.toolBarWidget = QtWidgets.QWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolBarWidget.sizePolicy().hasHeightForWidth())
        self.toolBarWidget.setSizePolicy(sizePolicy)
        self.toolBarWidget.setMinimumSize(QtCore.QSize(0, 0))
        self.toolBarWidget.setMaximumSize(QtCore.QSize(100, 16777215))
        self.toolBarWidget.setObjectName("toolBarWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.toolBarWidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.linxTool = QtWidgets.QToolButton(self.toolBarWidget)
        self.linxTool.setCheckable(True)
        self.linxTool.setToolButtonStyle(QtCore.Qt.ToolButtonTextOnly)
        self.linxTool.setAutoRaise(True)
        self.linxTool.setObjectName("linxTool")
        self.verticalLayout_2.addWidget(self.linxTool)
        self.logxTool = QtWidgets.QToolButton(self.toolBarWidget)
        self.logxTool.setCheckable(True)
        self.logxTool.setToolButtonStyle(QtCore.Qt.ToolButtonTextOnly)
        self.logxTool.setAutoRaise(True)
        self.logxTool.setObjectName("logxTool")
        self.verticalLayout_2.addWidget(self.logxTool)
        self.linyTool = QtWidgets.QToolButton(self.toolBarWidget)
        self.linyTool.setCheckable(True)
        self.linyTool.setToolButtonStyle(QtCore.Qt.ToolButtonTextOnly)
        self.linyTool.setAutoRaise(True)
        self.linyTool.setObjectName("linyTool")
        self.verticalLayout_2.addWidget(self.linyTool)
        self.logyTool = QtWidgets.QToolButton(self.toolBarWidget)
        self.logyTool.setCheckable(True)
        self.logyTool.setToolButtonStyle(QtCore.Qt.ToolButtonTextOnly)
        self.logyTool.setAutoRaise(True)
        self.logyTool.setObjectName("logyTool")
        self.verticalLayout_2.addWidget(self.logyTool)
        self.invxTool = QtWidgets.QToolButton(self.toolBarWidget)
        self.invxTool.setEnabled(True)
        self.invxTool.setCheckable(True)
        self.invxTool.setToolButtonStyle(QtCore.Qt.ToolButtonTextOnly)
        self.invxTool.setAutoRaise(True)
        self.invxTool.setObjectName("invxTool")
        self.verticalLayout_2.addWidget(self.invxTool)
        self.invyTool = QtWidgets.QToolButton(self.toolBarWidget)
        self.invyTool.setEnabled(True)
        self.invyTool.setCheckable(True)
        self.invyTool.setToolButtonStyle(QtCore.Qt.ToolButtonTextOnly)
        self.invyTool.setAutoRaise(True)
        self.invyTool.setObjectName("invyTool")
        self.verticalLayout_2.addWidget(self.invyTool)
        self.gridTool = QtWidgets.QToolButton(self.toolBarWidget)
        self.gridTool.setEnabled(True)
        self.gridTool.setCheckable(True)
        self.gridTool.setToolButtonStyle(QtCore.Qt.ToolButtonTextOnly)
        self.gridTool.setAutoRaise(True)
        self.gridTool.setObjectName("gridTool")
        self.verticalLayout_2.addWidget(self.gridTool)
        self.recipyTool = QtWidgets.QToolButton(self.toolBarWidget)
        self.recipyTool.setEnabled(False)
        self.recipyTool.setCheckable(True)
        self.recipyTool.setToolButtonStyle(QtCore.Qt.ToolButtonTextOnly)
        self.recipyTool.setAutoRaise(True)
        self.recipyTool.setObjectName("recipyTool")
        self.verticalLayout_2.addWidget(self.recipyTool)
        self.gridLayout_2.addWidget(self.toolBarWidget, 1, 0, 1, 1)
        self.gridLayout_3.addLayout(self.gridLayout_2, 0, 0, 1, 1)
        self.actionButtons = QtWidgets.QVBoxLayout()
        self.actionButtons.setObjectName("actionButtons")
        self.plotSelectedButton = QtWidgets.QPushButton(self.centralwidget)
        self.plotSelectedButton.setObjectName("plotSelectedButton")
        self.actionButtons.addWidget(self.plotSelectedButton)
        self.clearPlotButton = QtWidgets.QPushButton(self.centralwidget)
        self.clearPlotButton.setObjectName("clearPlotButton")
        self.actionButtons.addWidget(self.clearPlotButton)
        self.clearSelectionsButton = QtWidgets.QPushButton(self.centralwidget)
        self.clearSelectionsButton.setObjectName("clearSelectionsButton")
        self.actionButtons.addWidget(self.clearSelectionsButton)
        self.clearExperimentButton = QtWidgets.QPushButton(self.centralwidget)
        self.clearExperimentButton.setObjectName("clearExperimentButton")
        self.actionButtons.addWidget(self.clearExperimentButton)
        self.editMetadataButton = QtWidgets.QPushButton(self.centralwidget)
        self.editMetadataButton.setObjectName("editMetadataButton")
        self.actionButtons.addWidget(self.editMetadataButton)
        self.generateReportButton = QtWidgets.QPushButton(self.centralwidget)
        self.generateReportButton.setObjectName("generateReportButton")
        self.actionButtons.addWidget(self.generateReportButton)
        self.gridLayout_3.addLayout(self.actionButtons, 1, 1, 1, 1)
        Plotter.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Plotter)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1403, 38))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuExport = QtWidgets.QMenu(self.menuFile)
        self.menuExport.setObjectName("menuExport")
        self.menuActive_Plot = QtWidgets.QMenu(self.menuExport)
        self.menuActive_Plot.setObjectName("menuActive_Plot")
        self.menuAll_Plots = QtWidgets.QMenu(self.menuExport)
        self.menuAll_Plots.setObjectName("menuAll_Plots")
        Plotter.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Plotter)
        self.statusbar.setObjectName("statusbar")
        Plotter.setStatusBar(self.statusbar)
        self.actionLoad_data = QtWidgets.QAction(Plotter)
        self.actionLoad_data.setObjectName("actionLoad_data")
        self.actionSave_File = QtWidgets.QAction(Plotter)
        self.actionSave_File.setObjectName("actionSave_File")
        self.actionSave_As = QtWidgets.QAction(Plotter)
        self.actionSave_As.setObjectName("actionSave_As")
        self.actionGenerate_Report = QtWidgets.QAction(Plotter)
        self.actionGenerate_Report.setObjectName("actionGenerate_Report")
        self.actionExit = QtWidgets.QAction(Plotter)
        self.actionExit.setObjectName("actionExit")
        self.actionAs_txt = QtWidgets.QAction(Plotter)
        self.actionAs_txt.setObjectName("actionAs_txt")
        self.actionAs_PNG = QtWidgets.QAction(Plotter)
        self.actionAs_PNG.setObjectName("actionAs_PNG")
        self.actionAs_PDF = QtWidgets.QAction(Plotter)
        self.actionAs_PDF.setObjectName("actionAs_PDF")
        self.actionAs_txt_2 = QtWidgets.QAction(Plotter)
        self.actionAs_txt_2.setObjectName("actionAs_txt_2")
        self.actionAs_PNG_2 = QtWidgets.QAction(Plotter)
        self.actionAs_PNG_2.setObjectName("actionAs_PNG_2")
        self.actionAs_PDF_2 = QtWidgets.QAction(Plotter)
        self.actionAs_PDF_2.setObjectName("actionAs_PDF_2")
        self.actionAs_JPG = QtWidgets.QAction(Plotter)
        self.actionAs_JPG.setObjectName("actionAs_JPG")
        self.actionAs_TIFF = QtWidgets.QAction(Plotter)
        self.actionAs_TIFF.setObjectName("actionAs_TIFF")
        self.actionAs_JPG_2 = QtWidgets.QAction(Plotter)
        self.actionAs_JPG_2.setObjectName("actionAs_JPG_2")
        self.actionAs_TIFF_2 = QtWidgets.QAction(Plotter)
        self.actionAs_TIFF_2.setObjectName("actionAs_TIFF_2")
        self.actionAdd_data = QtWidgets.QAction(Plotter)
        self.actionAdd_data.setObjectName("actionAdd_data")
        self.menuActive_Plot.addAction(self.actionAs_txt)
        self.menuActive_Plot.addSeparator()
        self.menuActive_Plot.addAction(self.actionAs_PNG)
        self.menuActive_Plot.addAction(self.actionAs_JPG)
        self.menuActive_Plot.addAction(self.actionAs_TIFF)
        self.menuActive_Plot.addSeparator()
        self.menuActive_Plot.addAction(self.actionAs_PDF)
        self.menuAll_Plots.addAction(self.actionAs_txt_2)
        self.menuAll_Plots.addSeparator()
        self.menuAll_Plots.addAction(self.actionAs_PNG_2)
        self.menuAll_Plots.addAction(self.actionAs_JPG_2)
        self.menuAll_Plots.addAction(self.actionAs_TIFF_2)
        self.menuAll_Plots.addSeparator()
        self.menuAll_Plots.addAction(self.actionAs_PDF_2)
        self.menuExport.addAction(self.menuActive_Plot.menuAction())
        self.menuExport.addAction(self.menuAll_Plots.menuAction())
        self.menuFile.addAction(self.actionLoad_data)
        self.menuFile.addAction(self.actionAdd_data)
        self.menuFile.addAction(self.actionSave_File)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionGenerate_Report)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.menuExport.menuAction())
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(Plotter)
        QtCore.QMetaObject.connectSlotsByName(Plotter)

    def retranslateUi(self, Plotter):
        _translate = QtCore.QCoreApplication.translate
        Plotter.setWindowTitle(_translate("Plotter", "DataPlotter"))
        self.commentsBox.setTitle(_translate("Plotter", "Metadata"))
        self.addPlotButton.setToolTip(_translate("Plotter", "<html><head/><body><p>add new data to the list</p></body></html>"))
        self.addPlotButton.setText(_translate("Plotter", "Add..."))
        self.plotTree.setToolTip(_translate("Plotter", "<html><head/><body><p>Use arrow keys to navigate through experiment list. </p><p>You can rearrange the data using mouse.</p><p>You can delete active data using delete key.</p></body></html>"))
        self.plotTree.headerItem().setText(0, _translate("Plotter", "Experiment Data"))
        self.linxTool.setToolTip(_translate("Plotter", "<html><head/><body><p>make x-axis linear</p></body></html>"))
        self.linxTool.setText(_translate("Plotter", "lin x"))
        self.logxTool.setToolTip(_translate("Plotter", "<html><head/><body><p>make x-axis log scale. Negative regions are ignored.</p></body></html>"))
        self.logxTool.setText(_translate("Plotter", "log x"))
        self.linyTool.setToolTip(_translate("Plotter", "<html><head/><body><p>Make y-axis linear</p></body></html>"))
        self.linyTool.setText(_translate("Plotter", "lin y"))
        self.logyTool.setToolTip(_translate("Plotter", "<html><head/><body><p>Make y-axis log scale. Negative regions are ignored. IV data will use absolute current value for negative region.</p></body></html>"))
        self.logyTool.setText(_translate("Plotter", "log y"))
        self.invxTool.setToolTip(_translate("Plotter", "<html><head/><body><p>Invert/reverse the x-axis</p></body></html>"))
        self.invxTool.setText(_translate("Plotter", "inv x"))
        self.invyTool.setToolTip(_translate("Plotter", "<html><head/><body><p>invert/reverse the y-axis</p></body></html>"))
        self.invyTool.setText(_translate("Plotter", "inv y"))
        self.gridTool.setToolTip(_translate("Plotter", "<html><head/><body><p>show/hide grid</p></body></html>"))
        self.gridTool.setText(_translate("Plotter", "grid"))
        self.recipyTool.setToolTip(_translate("Plotter", "<html><head/><body><p>plot y-axis in reciprocal scale.</p></body></html>"))
        self.recipyTool.setText(_translate("Plotter", "1/y"))
        self.plotSelectedButton.setToolTip(_translate("Plotter", "<html><head/><body><p>Plot the selected data together.</p></body></html>"))
        self.plotSelectedButton.setWhatsThis(_translate("Plotter", "<html><head/><body><p><br/></p></body></html>"))
        self.plotSelectedButton.setText(_translate("Plotter", "Plot Selected"))
        self.clearPlotButton.setToolTip(_translate("Plotter", "<html><head/><body><p>Clear the plot screen</p></body></html>"))
        self.clearPlotButton.setText(_translate("Plotter", "Clear Plot"))
        self.clearSelectionsButton.setToolTip(_translate("Plotter", "<html><head/><body><p>Uncheck all data</p></body></html>"))
        self.clearSelectionsButton.setText(_translate("Plotter", "Clear Selections"))
        self.clearExperimentButton.setToolTip(_translate("Plotter", "<html><head/><body><p>Clear all experiment data from the list</p></body></html>"))
        self.clearExperimentButton.setText(_translate("Plotter", "Clear Experiment List"))
        self.editMetadataButton.setToolTip(_translate("Plotter", "<html><head/><body><p>Edit the comments for currently active data</p></body></html>"))
        self.editMetadataButton.setText(_translate("Plotter", "Edit Metadata"))
        self.generateReportButton.setToolTip(_translate("Plotter", "<html><head/><body><p>Generate a report from all the data present in the list.</p></body></html>"))
        self.generateReportButton.setText(_translate("Plotter", "Generate Report"))
        self.menuFile.setTitle(_translate("Plotter", "File"))
        self.menuExport.setTitle(_translate("Plotter", "Export"))
        self.menuActive_Plot.setTitle(_translate("Plotter", "Active Plot"))
        self.menuAll_Plots.setTitle(_translate("Plotter", "All Plots"))
        self.actionLoad_data.setText(_translate("Plotter", "Load new data"))
        self.actionSave_File.setText(_translate("Plotter", "Save File"))
        self.actionSave_As.setText(_translate("Plotter", "Save As"))
        self.actionGenerate_Report.setText(_translate("Plotter", "Generate Report"))
        self.actionExit.setText(_translate("Plotter", "Exit"))
        self.actionAs_txt.setText(_translate("Plotter", "As txt"))
        self.actionAs_PNG.setText(_translate("Plotter", "As PNG"))
        self.actionAs_PDF.setText(_translate("Plotter", "As PDF"))
        self.actionAs_txt_2.setText(_translate("Plotter", "As txt"))
        self.actionAs_PNG_2.setText(_translate("Plotter", "As PNG"))
        self.actionAs_PDF_2.setText(_translate("Plotter", "As PDF"))
        self.actionAs_JPG.setText(_translate("Plotter", "As JPG"))
        self.actionAs_TIFF.setText(_translate("Plotter", "As TIFF"))
        self.actionAs_JPG_2.setText(_translate("Plotter", "As JPG"))
        self.actionAs_TIFF_2.setText(_translate("Plotter", "As TIFF"))
        self.actionAdd_data.setText(_translate("Plotter", "Add data"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Plotter = QtWidgets.QMainWindow()
    ui = Ui_Plotter()
    ui.setupUi(Plotter)
    Plotter.show()
    sys.exit(app.exec_())

